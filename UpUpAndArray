package mini2;

import java.util.Arrays;

/**
 * Some loop practice problems involving arrays.
 */
public class UpUpAndArray
{
  /**
   * Private constructor disables instantiation.
   */
  private UpUpAndArray()
  {
    
  }
  
  
  // The isPermutation code below is given.  It will be useful in 
  // implementing the rearrange() method.
  /**
   * Determines whether the given array is a permutation.
   * A permutation is defined to be an int array that
   * contains each number from 0 through n - 1 exactly
   * once, where n is the length of the array.  In other
   * words, each value is between 0 and n - 1, inclusive,
   * and there are no duplicates.
   * @param arr
   *   given array
   * @return
   *   true if the given array is a permutation, false otherwise
   */
  public static boolean isPermutation(int[] arr)
  {
    // set found[x] to true if we find x in arr
    boolean[] found = new boolean[arr.length];
    for (int i = 0; i< arr.length; ++i)
    {
      int x = arr[i];
      if (x < 0 || x >= arr.length || found[x])
      {
        // x is out of range, or is a duplicate
        return false;
      }
      found[x] = true;
    }
    return true;
  }
  
  /**
   * Constructs a new array consisting of elements of arr between
   * the given start and end indices, inclusive.  If start is 
   * less than zero it is clamped up to zero, and if end is greater
   * than arr.length - 1, it is clamped down to arr.length - 1. If
   * end is less than start, an empty array is returned.
   * The given array is not modified.
   * <p>
   * For example, if arr = [10, 20, 30, 40, 50, 60, 70], start is 2, and
   * end is 5, the method returns the array [30, 40, 50, 60].
   * @param arr
   *   given array
   * @param start
   *   starting index to include in the subarray
   * @param end
   *   ending index to include in the subarray
   * @return
   *   array containing elements of arr between start and end, inclusive
   */
  public static int[] makeSubArray(int[] arr, int start, int end)
  {
    // TODO
	  
	  int[] empty; 
	  int spot = 0; 
	  int length = end - (start - 1); 
	  if(end < start) {
		  int nullArray[] = new int[0]; 
		  System.out.println(nullArray); 
	  }
	  if(start < 0) {
		  start = 0; 
	  }
	  if(arr.length - 1 < end) {
		  end = arr.length; 
	  }
	  empty = new int[length]; 
	  for(int i = 0; i <= length - 1; i++) {
		  empty[spot] = arr[start]; 
		  spot += 1; 
		  start += 1; 
		  
	  }
	  
    return empty;
  }
 
  /**
   * Exchanges adjacent pairs of elements in the given array.
   * If the given array is of odd length, the last element
   * is not moved.
   * @param arr
   *   given array to be modified
   */
  public static void swapPairs(int[] arr)
  {
	  for(int i = 1; i < arr.length; i = i+2) {
		  int temp = arr[i]; 
		  arr[i] = arr[i-1]; 
		  arr[i-1] = temp; 
	  }
	    
  }
  
  /**
   * Exchanges two columns of a 2D array.  For example, if
   * arr is:
   * <pre>
   * 1 2 3 4 5
   * 6 7 8 9 0
   * </pre>
   * then after the call swapColumns(arr, 1, 4), arr contains:
   * <pre>
   * 1 5 3 4 2
   * 6 0 8 9 7
   * </pre>
   * You can assume that the given array is nonempty and 
   * rectangular (i.e. all rows are the same length).
   * If i or j is out of range, the method does nothing.
   * @param arr
   *   given 2D array
   * @param i
   *   index of column to swap
   * @param j
   *   index of column to swap
   */
  public static void swapColumns(int[][] arr, int i, int j)
  {
	  for (int k = 0; k < arr.length; k++) {
      	//swapping
          int temp = arr[k][i];
      	arr[k][i]= arr[k][j];
      	arr[k][j] = temp;
          
          }
  }
  
  /**
   * Rearranges the given array according to the given permutation,
   * where perm[i] is the new index of element arr[i].
   * For example, if arr is [10, 20, 30, 40] and perm is
   * [2, 0, 3, 1], then after calling this method, arr contains
   * [20, 40, 10, 30].  If perm is not the same length as arr,
   * or if perm is not a permutation, the method does nothing.
   * @param arr
   *   given array
   * @param perm
   *   given array to be used as a permutation, if possible
   */
  public static void rearrange(int[] arr, int [] perm)
  {   
  
	if (arr.length != perm.length) {
		return; 
	}
	for(int i = 0; i < perm.length; i++) {
		if(perm[i] < 0 || perm[i] > arr.length) {
			return; 
		}
	}
	int[] temp = new int[arr.length]; 
	for(int i = 0; i < arr.length; i++) {
		temp[i] = arr[perm[i]]; 
	}
	for(int i = 0; i < arr.length; i++) {
		arr[i] = temp[i]; 
	}
  }
  
  /**
   * Finds the longest common suffix among the strings
   * in an array.  For example, if arr is
   * ["gladly", "badly", "boodly", "sadly"], the method
   * returns the string "dly".  If arr is ["foo", "food"],
   * the method returns an empty string.
   * @param arr
   *   array of strings
   * @return
   *   longest common suffix
   */
  public static String longestCommonSuffix(String[] arr)
  {
    // TODO
	  
    return null;
  }
  
  /**
   * Inserts one array into another at the given position.  Existing
   * elements are shifted to the right.  For example, if 
   * arr is [10, 20, 30, 40, 50, 60], pos is 1, and toInsert is the 
   * array [101, 102, 103], then after calling this method,
   * arr contains [10, 101, 102, 103, 20, 30].  If pos plus the
   * length of toInsert exceeds the length of arr, the extra elements
   * of toInsert are ignored. If pos is out of range, the method
   * does nothing.
   * @param arr
   *   given array to be modified
   * @param pos
   *   starting insert position
   * @param toInsert
   *   elements to be inserted
   */
  public static void insertArray(int[] arr, int pos, int[] toInsert)
  {
	  int newIndex = pos;
	    
	    if(pos < 0 || pos >= arr.length) return;
	    
	    for(int i=0;i<toInsert.length;i++) {
	        if((newIndex + toInsert.length) < arr.length)
	            arr[newIndex + toInsert.length] = arr[newIndex];
	        // assign only when newIndex is within bounds
	        if(newIndex < arr.length)
  	        arr[newIndex] = toInsert[i];
	        newIndex++;
	    }
	    
	    System.out.println(Arrays.toString(arr));
  }
  
  
  /**
   * Finds a permutation with the property that if arr 
   * is rearranged according to that permutation, it will
   * end up in ascending order.  That is, for an array arr,
   * after executing the code
   * <pre>
   *    int[] p = findPermutationToSort(arr);
   *    rearrange(arr, p);
   * </pre>
   * the array arr is sorted.  For example, if 
   * arr is [12, 7, 2, 5, 8], the method returns 
   * the array [4, 2, 0, 1, 3].  You can assume that
   * the given array has no duplicates.
   * @param arr
   *   given array
   * @return
   *   permutation that will rearrange arr to be sorted in
   *   ascending order
   */
  public static int[] findPermutationToSort(int[] arr)
  {
    // TODO
	  
    return null;
  }
  
  /**
   * NOTE: THIS IS AN EXTRA CREDIT PROBLEM.
   * 
   * Finds the longest arithmetic run in an int array.
   * An <em>arithmetic run</em> is a sequence of consecutive
   * elements with the same difference between them. For example, 
   * in the array [10, 20, 30, 25, 20, 15, 8, 9], all of 
   * the following are arithmetic runs:
   * <ul>
   *   <li>[10, 20, 30] (difference 10)
   *   <li>[30, 25, 20] (difference -5)
   *   <li>[25, 20, 15] (difference -5)
   *   <li>[30, 25, 20, 15] (difference -5)
   * </ul>
   * Note that any adjacent pair of elements is an arithmetic run
   * of length 2. In this case the method would return [30, 25, 20, 15].
   * If there are multiple arithmetic runs of the same length, the 
   * method returns the one with the smallest starting index. For example,
   * for array [12, 6, 2, 5, 9], the method returns [12, 6].
   * For an array of length 0, 1, or 2, the method just returns 
   * the array itself.
   * 
   * @param arr
   *   given array
   * @return
   *   new array containing the longest arithmetic run in the given array
   */
  public static int[] findLongestArithmeticRun(int[] arr)
  {
	  int n = arr.length;
		if (n <= 2)
			return arr;
		int leftInd = -1, rightInd = -1, ans = 0;
		int curLeftInd, curRightInd, curCount;
		for (int i = 0; i < n - 1; i++) {
			int d = arr[i + 1] - arr[i];
			curLeftInd = i;
			curRightInd = i + 1;
			curCount = 2;
			for (int j = i + 2; j < n; j++) {
				if (arr[j] - arr[j - 1] == d) {
					curRightInd = j;
					curCount += 1;
				} else {
					if (curCount > ans) {
						ans = curCount;
						leftInd = curLeftInd;
						rightInd = curRightInd;
					}
					break;
				}
			}
			if(curRightInd == n-1) {
				if (curCount > ans) {
					ans = curCount;
					leftInd = curLeftInd;
					rightInd = curRightInd;
				}
			}

		}
		int[] resArr = new int[ans];
		for (int i = leftInd, j = 0; i <= rightInd; i++, j++) {
			resArr[j] = arr[i];
		}
		return resArr;
  }
}

